#!/bin/bash

ROOTDIR="/srv/vmcore/kvm.d"

VERB=$1
shift
VM=$1
shift

DEFAULTCONF="$ROOTDIR/default"
VMCONF="$ROOTDIR/$VM"

export monitor backupimage

function help {
	echo ""
	echo "Usage: $(basename "$0") <VERB> <VM> [ARGS...]"
	echo ""
	echo "           VERB   One of:"
	echo "                    help, list, status, start, stop, enable, disable,"
	echo "                    backup, prebackup, postbackup, screendump, create"
	echo ""
	echo "           VM     Name of virtual machine"
	echo ""
}

function readvm {
	if [ -z "$VM" -o ! -f "$VMCONF" ]; then
		echo "VM config missing or no VM argument was provided"
		exit 1
	fi
	eval $(crudini --get --format=sh "$DEFAULTCONF" '')
	eval $(crudini --get --format=sh "$VMCONF" '')
	echo "VM: $name"
}

function bashcomplete {
	echo BASHCOMPLETE
}

function verbs {
	echo help
	echo list
	echo status
	echo start
	echo stop
	echo enable
	echo disable
	echo backup
	echo prebackup
	echo postbackup
	echo screendump
	echo cat
	echo create
	echo modify
}

function list {
	while read VMFILE; do
		basename "${VMFILE}"
	done < <(grep -El "^name=" /srv/vmcore/kvm.d/* | sort | grep -v -e'\.skel$')
}

function prebackup {
	if [ -x "$VMCONF.prebackup" ]; then
		"$VMCONF.prebackup"
	fi
}

function postbackup {
	if [ -x "$VMCONF.postbackup" ]; then
		"$VMCONF.postbackup"
	fi
}

function backup {
	/srv/vmcore/bin/backup "$VM"
}

function screendump {
	TEMPFILE="/tmp/screendump.$$.ppm"
	touch "$TEMPFILE"
	nc -q 5 127.0.0.1 $monitor < <(echo screendump "$TEMPFILE") >/dev/null
	if [ -f "$TEMPFILE" ]; then
		convert "$TEMPFILE" "$1"
		rm -f "$TEMPFILE"
	fi
}

function cat_ {
	cat "$ROOTDIR/$1"
}

function create {
	VM=$1
	shift
	VMID=$1
	shift
	TEMPLATE=${1:-default}
	shift

	if [ -z "$VM" ]; then
		help
		exit 1
	fi
	if [ -f "$VMCONF" ]; then
		echo "$VM seems to already exist."
		exit 1
	fi
	if [ -z "$VMID" ]; then
		# FIXME: it'd be nice to be able to generate one, but we don't have enough insight into the network yet
		echo "Missing VMID.  Usage:  vmcore create $VM [VMID]"
		echo ".. if you want VMID to be selected automatically, set VMID to auto."
		exit 1
	fi

	SKELFILE="$ROOTDIR/$TEMPLATE.skel"
	if [ ! -f "$SKELFILE" ]; then
		echo "$SKELFILE does not exist.  Cancelling."
		exit 1
	fi


	if [ "$VMID" = "auto" ]; then
		echo -n "Locating an available ID.  This might take a while... "
		VMID=$(/srv/vmcore/bin/find-spare-id)
		if [ -z "$VMID" ]; then
			echo "FAIL."
			echo "You selected 'auto' VMID, but one couldn't be selected for some reason.  Sorry."
			exit 1
		fi
		echo "OKAY!  Using VMID=$VMID."
	fi
	if [[ $VMID =~ ^[0-9]+$ ]]; then
		if [ "$VMID" -lt 1 -o "$VMID" -gt 254 ]; then
			echo "VMID must be in the range of 1-254."
			exit 1
		fi
	else
		echo "VMID must be an integer."
		exit 1
	fi
	echo -n "Testing the selected VMID [$VMID].  This might take a while... "
	if [ -z "$(/srv/vmcore/bin/find-spare-id $VMID)" ]; then
		echo "FAIL."
		echo "The selected VMID [$VMID] is already in use."
		exit 1
	fi
	echo "OKAY!"

	MONITORSUFFIX=$(printf "%03g" $VMID)
	GENMAC=$(echo -n "52:54:00"; dd bs=1 count=3 if=/dev/random 2>/dev/null | hexdump -ve '/1 ":%02X"')

	echo "Creating $VM [VMID=$VMID] with MAC [$GENMAC]..."

	TEMPCONF=$(mktemp)
	sed -e "s/\$VMID/$VMID/" -e "s/\$VM/$VM/" -e "s/\$MONITORSUFFIX/$MONITORSUFFIX/" -e "s/\$GENMAC/$GENMAC/" "$SKELFILE" > "$TEMPCONF"
	editor "$TEMPCONF"

	if [ -f "$VMCONF" ]; then
		echo "$VM seems to have been created by something else while you were busy editing the config file.  Cancelling..."
		exit 1
	fi
	mv "$TEMPCONF" "$VMCONF" && chmod 644 "$VMCONF"

	if [ -f "$VMCONF" ]; then
		echo "$VM configuration was created and placed in the appropriate location.  You're responsible for making the drives, etc."
		exit 0
	fi

	echo "It seems that there may have been an error when moving the configuration file to the appropriate location.  Oops?"
	exit 1
}

function modify {
	VM=$1
	editor "$VMCONF"
}

if [ -z "$VERB" -o "$VERB" == "-h" -o "$VM" == "-h" ]; then
	VERB=help
fi

case $VERB in
	bashcomplete)
		bashcomplete
		exit
		;;
	verbs)
		verbs
		exit
		;;
	help)
		help
		exit 1
		;;
	list)
		list
		exit
		;;
	prebackup)
		# can be used to prepare a VM for backup when the backup is coordinated via an external system
		readvm
		prebackup
		;;
	postbackup)
		# can be used to unprepare a VM for backup when the backup is coordinated via an external system
		readvm
		postbackup
		;;
	backup)
		readvm
		prebackup
		backup
		postbackup
		;;
	screendump)
		readvm
		screendump "$(readlink -f "$1")"
		;;
	cat)
		cat_ $VM
		;;
	create)
		create $VM $*
		;;
	modify)
		modify $VM $*
		;;
	*)
		readvm
		systemctl $VERB vmcore-kvm@$VM.service $*
		;;
esac
